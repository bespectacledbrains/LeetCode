---
# https://leetcode.com/problems/sales-analysis-i/
# https://leetcode.com/problems/sales-analysis-ii/
# https://leetcode.com/problems/sales-analysis-iii/
---
Table: Product

+--------------+---------+
| Column Name  | Type    |
+--------------+---------+
| product_id   | int     |
| product_name | varchar |
| unit_price   | int     |
+--------------+---------+
product_id is the primary key of this table.
Each row of this table indicates the name and the price of each product.
Table: Sales

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| seller_id   | int     |
| product_id  | int     |
| buyer_id    | int     |
| sale_date   | date    |
| quantity    | int     |
| price       | int     |
+-------------+---------+
This table has no primary key, it can have repeated rows.
product_id is a foreign key to the Product table.
Each row of this table contains some information about one sale.
---
# 1082. Sales Analysis I
# Write an SQL query that reports the best seller by total sales price, If there is a tie, report them all. Return the result table in any order.
---
```
select seller_id 
from (select seller_id, sum(price), rank() over(order by sum(price) desc) r 
      from sales
        group by seller_id) t
where r = 1
```
---
# 1083. Sales Analysis II
# Write an SQL query that reports the buyers who have bought S8 but not iPhone. Note that S8 and iPhone are products present in the Product table. Return the result table in any order.
---
```
# using sub-queries
/*select distinct buyer_id from sales 
where buyer_id in (select buyer_id from sales s join product p on s.product_id=p.product_id
where p.product_name like 'S8') 
and buyer_id not in (select buyer_id from sales s join product p on s.product_id=p.product_id
where p.product_name like 'iPhone') 
*/

# using group by and having to filter using sum() in having clause
select buyer_id 
from sales s join product p on s.product_id=p.product_id
group by buyer_id
having sum(product_name='S8')>0 and sum(product_name='iPhone')=0

# using count(case when) statements instead of sum - this is not as efficient as sum()
/*
select buyer_id 
from sales s join product p on s.product_id=p.product_id
group by buyer_id
HAVING COUNT(CASE WHEN product_name = 'S8' THEN product_name ELSE NULL END) > 0
AND COUNT(CASE WHEN product_name = 'iPhone' THEN product_name ELSE NULL END) = 0
*/
```
---
# 1084. Sales Analysis III
# Write an SQL query that reports the products that were only sold in the spring of 2019. That is, between 2019-01-01 and 2019-03-31 inclusive. Return the result table in any order.
---
```
select distinct s.product_id, product_name
from sales s join product p on s.product_id=p.product_id
and sale_date between '2019-01-01' and '2019-03-31'
and s.product_id not in 
(select product_id from sales where sale_date not between '2019-01-01' and '2019-03-31' )
```
---


